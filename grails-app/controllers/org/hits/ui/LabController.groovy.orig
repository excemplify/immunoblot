package org.hits.ui
import org.hits.ui.*
import grails.converters.JSON
import org.hits.parser.*
import org.hits.ui.TemplateToParserDef
import org.hits.ui.KnowledgeFetcher

/**
 *
 * @author rongji
 */

class LabController {
    def springSecurityService
    def parserService
    

    def index() {
  
     
    }
 
    
    def updateExp(){
        log.info "update Exp"
        def user = User.get(springSecurityService.principal.id)
         session.putAt("username",springSecurityService.authentication.name)
        log.info "user ${session.username}"
        log.info "ExperimentId: ${params.experimentId}}"
        log.info "Using Template: ${params.template}}"
        log.info "Set Up Resource: ${params.setUpResourceId}}"
        log.info "Need Stimulus Action: ${params.stimulus}}"
        log.info "Need Randomization: ${params.randomization}}"
        log.info "min1: ${params.min1}}"
        log.info "min2: ${params.min2}}"
        log.info "min3: ${params.min3}}"
        session.removeAttribute("setUpResourceIdUpdate")
        session.removeAttribute("setUpResourceNameUpdate")
       
        def setUpTemplate=Template.get(params.template)
   
        File setupFile = session.getAttribute("setupupdate")
        if (setupFile==null) {
            log.error "no file uploaded yet"
            return
        }
   
        // def experiment = new Experiment()
        def experiment=Experiment.get(params.experimentId)
        def newSetupResource=Resource.findById(params.setUpResourceId)
        def resourceName=newSetupResource.fileName
        def currentSetUpResource=experiment.resources.find{(it.type=="setup")&&(it.state=="active")}
        currentSetUpResource.state="inactive"
        currentSetUpResource.save(flush:true)
        def resources=experiment.resources
        def date=new Date()
        resources.add(newSetupResource)
        experiment.binaryData=newSetupResource.binaryData
        experiment.resources=resources
        experiment.setUpTemplateName=setUpTemplate.templateName
        //        experiment.logFile=logFileName
        try{
            experiment.save(failOnError: true)
            def sheetUpdate = new SheetUpdate(comment:"!!Set up file is updated once", dateUpdated:new Date())
            experiment.addToUpdates(sheetUpdate)
            session.putAt("fileName",resourceName)
            session.removeAttribute("parsedFile")
            session.removeAttribute("parsedFileName")   
            // lenneke change here to set up the parserDef
            parserService.parseSpreadsheet(setupFile,[template:setUpTemplate, parserType:"Lane Setup", randomization:params.randomization, stimulus:params.stimulus, min1:params.min1, min2:params.min2, min3:params.min3])
            //
            experiment.binaryData=session.getAttribute("parsedFile")
            sheetUpdate = new SheetUpdate(comment:"Created lane loading", dateUpdated:new Date())
            experiment.addToUpdates(sheetUpdate)
            experiment.save(flush:true)
            session.removeAttribute("setupupdate")
            setupFile.delete()
            session.removeAttribute("setUpResourceIdUpdate")
            session.removeAttribute("experimentId")
            session.removeAttribute("experimentName")
            render(text: """<script type="text/javascript"> afterUpload2(); </script>""", contentType: 'text/javascript')
            render(text: """<script type="text/javascript"> refreshTableSorter(); </script>""", contentType: 'text/javascript')
         
        }catch(grails.validation.ValidationException e){
            setupFile.delete()
            log.error e.message
            render(text: """<script type="text/javascript"> warningMessage('Please make sure the experiment name is unique.'); </script>""", contentType: 'text/javascript')
   
        
        }
   
        render(template:"/ui/user/experiment", model:[experimentInstanceList:Experiment?.findAllByAuthor(user)] )
    }
    
    
    
    
    
    def initialExp(){
        //     def webRootDir = servletContext.getRealPath("/")
        //        def logPath = webRootDir+"explog/"
        //        def dir = new File(logPath)
        //        if(!dir.exists()){
        //            dir.mkdirs()
        //        }
        def user = User.get(springSecurityService.principal.id)
     
        session.putAt("username",springSecurityService.authentication.name)
        log.info "user ${session.username}"
        log.info "ExperimentName: ${params.experimentName}"
        log.info "Using Template: ${params.template}"
        log.info "Set Up Resource: ${params.setUpResourceId}"
        log.info "Need Stimulus Action: ${params.stimulus}"
        log.info "Need Randomization: ${params.randomization}"
        log.info "min1: ${params.min1}"
        log.info "min2: ${params.min2}"
        log.info "min3: ${params.min3}"
        session.removeAttribute("setUpResourceId")
        session.removeAttribute("setUpResourceName")
        def blots =3
        def setUpTemplate=Template.get(params.template)
  

        File setupFile = session.getAttribute("setup")
        if (setupFile==null) {
            log.error "no file uploaded yet"
            return
        }
   
        def experiment = new Experiment()
        def setupResource=Resource.findById(params.setUpResourceId)
        def resourceName=setupResource.fileName
        def resources=[]
        def date=new Date()
        resources.add(setupResource)
        experiment.filename=params.experimentName
        experiment.binaryData=setupResource.binaryData
        experiment.author=user
        experiment.createdOn=date
        experiment.resources=resources
        experiment.setUpTemplateName=setUpTemplate.templateName
        experiment.share="private"
        //        experiment.logFile=logFileName
        try{
            experiment.save(failOnError: true)
            def sheetUpdate = new SheetUpdate(comment:"initial ${params.experimentName}", dateUpdated:new Date())
            experiment.addToUpdates(sheetUpdate)
            session.putAt("fileName",resourceName)
            session.removeAttribute("parsedFile")
            session.removeAttribute("parsedFileName")     
            // lenneke change here to set up the parserDef
            // instead should pass in the template name
            (0..blots).each{i->
              
                parserService.parseSpreadsheet(setupFile,[template:setUpTemplate, parserType:"Lane Setup", target:"auto_loading_blot${i}", randomization:params.randomization, stimulus:params.stimulus, min1:params.min1, min2:params.min2, min3:params.min3])
        
            }
           
            experiment.binaryData=session.getAttribute("parsedFile")
            sheetUpdate = new SheetUpdate(comment:"Created lane loading", dateUpdated:new Date())
            experiment.addToUpdates(sheetUpdate)
            experiment.save(flush:true)
            session.removeAttribute("setup")
            setupFile.delete()
            session.removeAttribute("setUpResourceId")
            session.removeAttribute("experimentId")
            render(text: """<script type="text/javascript"> afterUpload(); </script>""", contentType: 'text/javascript')
            render(text: """<script type="text/javascript"> refreshTableSorter(); </script>""", contentType: 'text/javascript')
          
        }catch(grails.validation.ValidationException e){
            // setupFile.delete()
            
            log.error e.message
            render(text: """<script type="text/javascript"> warningMessage('Please make sure the experiment name is unique.'); </script>""", contentType: 'text/javascript')
    
        
        }
        render(template:"/ui/user/experiment", model:[experimentInstanceList:Experiment?.findAllByAuthor(user)] )
   
    }
    
    def warning(){
        log.info "warning"
        render(template: "/ui/user/warning")
    }
    def clear(){
        session.removeAttribute("setup")
        session.removeAttribute("setupupdate")
        session.removeAttribute("rawdata")
        session.removeAttribute("rawdatamap")
        session.removeAttribute("experimentId")
        session.removeAttribute("experimentName")
        session.removeAttribute("info")
        session.removeAttribute('setUpResourceName')
        session.removeAttribute('setUpResourceNameUpdate')
        session.removeAttribute('setUpResourceIdUpdate')
        session.removeAttribute("fileName")
        session.removeAttribute("parsedFile")
        session.removeAttribute("parsedFileName") 
        session.removeAttribute("openFileName") 
        session.removeAttribute("file") 
        session.removeAttribute("xml") 
     
        redirect(uri:"/")
    }
    
    def updateUpload(){
        log.info "experimentName: ${params.experimentName}"
        log.info "experimentId: ${params.experimentId}"
        log.info "update upload set up"
        def experimentName=params.experimentName
        def experimentId=params.experimentId
        def webRootDir = servletContext.getRealPath("/")
        def savePath = webRootDir+"raw/"
        def dir = new File(savePath)
        if (!dir.exists()) {
            // attempt to create the path
            try {
                dir.mkdirs()
            } catch (Exception e) {
                response.setStatus(500, "could not create upload path ${savePath}")
                //render([written: false, fileName: file.name] as JSON)
                return false
            }
        }
        def f = request.getFile('mySetUpUpdate')
        def filePath=savePath
        if(!f.empty) {
            print "upload "+f.getOriginalFilename()
            def fileName=f.getOriginalFilename()
         
            filePath=filePath+"/"+System.nanoTime().toString()+"${f.getOriginalFilename()}"
            File newFile=new File(filePath)
            f.transferTo(newFile)
            session.putAt("setupupdate", newFile)
            def user=User.get(springSecurityService.principal.id)
            def  setUpResource=new Resource(fileName:fileName, type:"setup", binaryData:newFile.bytes, author:user, state:"active");            
            setUpResource.save();
            log.info "resourceId ${setUpResource.id}"
            session.putAt("setUpResourceIdUpdate",setUpResource.id )
            session.putAt("setUpResourceNameUpdate",fileName )
            session.putAt("experimentName",experimentName )
            session.putAt("experimentId",experimentId)
            redirect(uri:"/lab")
    
        
        }
        else {
            flash.message = 'file cannot be empty'
        }

        log.info "Resource: $Resource.count"
  
    

    }
    
    
    
    
    
    
    def upload(){

        log.info "upload set up"
        def webRootDir = servletContext.getRealPath("/")
        def savePath = webRootDir+"raw/"
        def dir = new File(savePath)
        if (!dir.exists()) {
            // attempt to create the path
            try {
                dir.mkdirs()
            } catch (Exception e) {
                response.setStatus(500, "could not create upload path ${savePath}")
                //render([written: false, fileName: file.name] as JSON)
                return false
            }
        }
        def f = request.getFile('mySetUp')
        def filePath=savePath
        if(!f.empty) {
            print "upload "+f.getOriginalFilename()
            def fileName=f.getOriginalFilename()
         
            filePath=filePath+"/"+System.nanoTime().toString()+"${f.getOriginalFilename()}"
            File newFile=new File(filePath)
            f.transferTo(newFile)
            session.putAt("setup", newFile)
            def user=User.get(springSecurityService.principal.id)
            def  setUpResource=new Resource(fileName:fileName, type:"setup", binaryData:newFile.bytes, author:user, state:"active");            
            setUpResource.save();
            log.info "resourceId ${setUpResource.id}"
            session.putAt("setUpResourceId",setUpResource.id )
            session.putAt("setUpResourceName",fileName )
            redirect(uri:"/lab")
    
        
        }
        else {
            flash.message = 'file cannot be empty'
        }

        log.info "Resource: $Resource.count"
  
    

    }


}
