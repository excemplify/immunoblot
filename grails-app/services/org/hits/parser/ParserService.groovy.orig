package org.hits.parser
   

import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.ss.usermodel.Workbook
import org.apache.poi.ss.usermodel.Sheet
import org.apache.poi.ss.util.CellRangeAddress
import org.apache.poi.ss.usermodel.WorkbookFactory
import org.springframework.web.context.request.RequestContextHolder
import javax.servlet.http.HttpSession
import groovy.util.Eval

import org.hits.parser.core.*
import org.hits.parser.excelimp.*
import org.hits.ui.Template
import org.hits.ui.TemplateToParserDef

class ParserService {

    static transactional = true

    def getAllParserNames(){
        def names=[]
        ParserDef.findAll().each{
            names<<it.name
        }
        return names
    }
    
    def parseSpreadsheet(File file, String parserType)  throws ParserConfigException,ParsingException{
        
        HttpSession session = getSession()
        
        //this hardcoded configuration stuff will change with the parser config service
        // then the hardcoding of a particular parser (eg "Planning" etc will be bootstrapped
        // controller can select types of parsers from list of parserdefs
       
        StateAndQueue state = session.getAttribute("StateAndQueue")
        
        state.state.experimentWorkbook=session.getAttribute("ExperimentWorkbook")
        state.state.fileName=session.getAttribute("fileName")
        if (state==null){
            state = new StateAndQueue()
        }
        else {
        }
        state.state.file=file //need to think about this more
        //state.state.fis=inputStream
        // Block displayBlock = new Block(name: "displayParser", parser: new DisplayExcelParser())
        try{
              
              
            println "about to get the parser"
              
            Block rootBlock = createParserBlock(state,parserType)
           
            rootBlock.applyQueue(state)
              
            
            //  session.putValue("blankcells",state.state.blankcells)// this needs to be more general
            session.putValue("parsedFile",state.state.parsedFile)
             
            //return state.state.rows
           
            return state
        }
        //catch(ParserConfigException pcex){
        //    println pcex.message+"hello"
        //    throw pcex
        //}
        catch(ParsingException pex){
            println    pex.message  
            println "exception caught applying queue"
            throw pex
            //return //something to the controller about the need for more input
        } 
            
            
                
           
        
    }
       
    def parseSpreadsheet(byte[] fileData, params){
        
        InputStream is = new ByteArrayInputStream(fileData)
        File file = File.createTempFile(session.getAttribute("fileName"),"")
        file.bytes=fileData
        parseSpreadsheet(file, params)
        
    }
    
    
    def parseSpreadsheet(File file, params){
        String parserType = params.parserType        
        Template template = params.template
               
        
        //add these to the state..perhaps just add all params to the state?
        HttpSession session = getSession()
        
      
        StateAndQueue state = session.getAttribute("StateAndQueue")?:new StateAndQueue()
        if(session.getAttribute("parsedFile")){
             state.state.workbook=session.getAttribute("parsedFile")
        }
        state.state.experimentWorkbookFile=session.getAttribute("ExperimentWorkbook") //the current experiment results/planning/etc workbook
        state.state.file=file // the file for parsing
        state.state.fileName=session.getAttribute("fileName")
        println params
        //  if (params.source){
        //      state.state.source=params.source
        //  }
        //  if (params.sheetNumber){
        //      state.state.sheetNumber=params.sheetNumber
        //  }
        //  state.state.params=params
        try{
              
            println "about to get the parser"
         
            Block rootBlock = createParserBlock(state,template,parserType,params)
           
            rootBlock.applyQueue(state)
              
            
            //  session.putValue("blankcells",state.state.blankcells)// this needs to be more general
        
            session.putValue("parsedFile",state.state.parsedFile)
            session.putValue("parsedFileName","parsed_"+state.state.fileName)
          
           
            return state
        }
           
        catch(ParsingException pex){
            println    pex.message  
            println "exception caught applying queue"
            throw pex
            //return //something to the controller about the need for more input
        } 
    }
    
    def parseSpreadsheet(String filepath) {

        InputStream fis = new FileInputStream(filepath)
        parseSpreadsheet(fis)
        
    }
 
  
    def createParserBlock(StateAndQueue state,Template template, String parserName, params) throws ParserConfigException{
       
        
        def parserDef = TemplateToParserDef.findByTemplate(template).parserDefs.find{ it.nextStageName==parserName }
       
        println "creating parser block for name: ${parserName}"
        println parserDef.parserConfigurations
        parserDef.parserConfigurations.each{
            println it.properties
        }
        Block rootBlock
        Block prevBlock = null
        parserDef.parserConfigurations.each{ it->
            def newmap=[:]
            //def configmap=it.properties
            it.properties.each{k,v-> newmap.put(k,v)}
            
            def configmap=newmap
            configmap.put("template",Template)
            if (params.stimulus!=null) {
                println "stimulus (createBlock) ${params.stimulus}"
                configmap.put("stimulus",params.stimulus)
            }
            if (params.randomization!=null){
                configmap.put("randomization",params.randomization)
                configmap.put("min1",params.min1)
                configmap.put("min2",params.min2)
                configmap.put("min3",params.min3)
            }
            if(params.target!=null){
                 configmap.put("targetSheet",params.target) 
            }
            //iterate thru list of config mappings
            //may need to double check the tree-likeness of this structure
            Block block = new Block(name:it.name, parser:ParserFactory.getParser(state,configmap) )//configmap has to hold source, target etc
            if (prevBlock!=null){
                println "prevblock=${prevBlock.name}"
                if (configmap.nodeType=="right"){
                    prevBlock.right = block
                }
                else{
                    prevBlock.down=block
                }
            }
            else {//we have the root node
                rootBlock=block
            }
            prevBlock=block
        }
        rootBlock.buildQueue(state)
        
        return rootBlock
        
        
    }
    
    def createParserBlock(StateAndQueue state,Template template,String parserName) throws ParserConfigException{

        def parserDef = TemplateToParserDef.findByTemplate(template).parserDefs.find{ it.nextStageName==parserName }
        //def parserDef = ParserDef.findByName(parserName)
       
        println "creating parser block for name: ${parserName}"
        println parserDef.parserConfigurations
        parserDef.parserConfigurations.each{
            println it.properties
        }
       
        ///tateAndQueue state = new StateAndQueue()
        //get the sheet here and put it in the state
        
        
        
        Block rootBlock
        Block prevBlock = null
        parserDef.parserConfigurations.each{ it->
            def configmap=it.properties
            configmap.put("template",template)
            //iterate thru list of config mappings
            //may need to double check the tree-likeness of this structure
            Block block = new Block(name:it.name, parser:ParserFactory.getParser(state,configmap) )//configmap has to hold source, target etc
            if (prevBlock!=null){
                println "prevblock=${prevBlock.name}"
                if (configmap.nodeType=="right"){
                    prevBlock.right = block
                }
                else{
                    prevBlock.down=block
                }
            }
            else {//we have the root node
                rootBlock=block
            }
            prevBlock=block
        }
        rootBlock.buildQueue(state)
        
        return rootBlock
    }
    
    
    private HttpSession getSession() {
        return RequestContextHolder.currentRequestAttributes().getSession()
    }
  
    public getParserName(String name){
      
        switch(name){
            case "gelinspector":
            return "Raw Data to Gel Inspector"
            break
            case "setup":
            return "Lane Setup"
            break
        }
    }
}